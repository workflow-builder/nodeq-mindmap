export interface MindMapNode {
    topic: string;
    summary?: string;
    skills?: string[];
    children?: MindMapNode[];
    [key: string]: any;
}
export interface NodeQConfig {
    container: string | HTMLElement;
    data: any;
    width?: number;
    height?: number;
    theme?: {
        nodeColor?: string;
        textColor?: string;
        linkColor?: string;
        backgroundColor?: string;
        fontSize?: number;
        fontFamily?: string;
    };
    interactive?: boolean;
    zoomable?: boolean;
    collapsible?: boolean;
    nodeSpacing?: number;
    levelSpacing?: number;
    onNodeClick?: (node: MindMapNode) => void;
    onNodeHover?: (node: MindMapNode) => void;
}
export declare class JsonSchemaAdapter {
    static convertToStandard(data: any): MindMapNode;
    private static extractTopic;
    private static extractSummary;
    private static extractSkills;
    private static extractChildren;
}
export declare class NodeQMindMap {
    private config;
    private svg;
    private g;
    private data;
    private container;
    constructor(config: NodeQConfig);
    render(): void;
    updateData(data: any): void;
    updateTheme(theme: Partial<NodeQConfig['theme']>): void;
    exportSVG(): string;
    destroy(): void;
    private createSVG;
    private renderMindMap;
    zoomToFit(): void;
}
export default NodeQMindMap;
//# sourceMappingURL=index.d.ts.map